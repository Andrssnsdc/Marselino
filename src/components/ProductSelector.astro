---
// ProductSelector.astro
import { Image } from 'astro:assets';
import { navigate } from 'astro:transitions/client';

interface Props {
  title: string;
  subtitle: string;
  description: string;
  backgroundClass: string;
  productImage: string;
  colors: Array<{name: string, hex: string}>;
  sizeGuideImage: string;
  price: number;
}

const {
  title = "PRODUCTO",
  subtitle = "Desde $0",
  description = "Incluye 1 bordado personalizado",
  backgroundClass = "bg-medium-blue",
  productImage = "/images/default-product.webp",
  colors = [
    {name: "cafe", hex: "#5f342a"},
    {name: "verde", hex: "#4d5d50"},
    {name: "azul", hex: "#8da1fa"},
    {name: "amarillo", hex: "#d1d875"},
    {name: "rosa", hex: "#c37bbe"}
  ],
  sizeGuideImage = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQdeJ_RBWH0hG3ONYh1A6uRjj8HCC3FRRMeTQ&s",
  price = 0
} = Astro.props;

const productId = `product-${Math.random().toString(36).substr(2, 9)}`;
---

<article class={`product-card ${backgroundClass}`} id={productId} transition:name={`product-card${productId}`}>
  <div class="product-content">
    <header class="product-header">
      <h3 class="product-title" transition:name={`title${productId}`}>{title}</h2>
      <h4 class="product-subtitle" >{subtitle}</h3>
        
    </header>
    <p class="product-description" >{description}</p>
    <div class="product-details">
      <div class="options-container">
        <div class="options-column">
          <div class="options-box size-options">
            <button class="option-button size-button">S</button>
            <button class="option-button size-button">M</button>
            <button class="option-button size-button">L</button>
            <button class="option-button size-button">XL</button>
            <button class="option-button size-button">XXL</button>
          </div>
          <div class="error-message">Selecciona una talla</div>
        </div>
        <div class="options-column">
          <div class="options-box color-options">
            {colors.map(color => (
              <button 
                class="option-button color-button" 
                data-identifier={color.name}
                style={`background-color: ${color.hex};`}
              ></button>
            ))}
          </div>
          <div class="error-message">Selecciona un color</div>
        </div>
        <div class="product-image">
          <Image 
            src={productImage} 
            alt={title} 
            width={300} 
            height={300} 
            transition:name={`imagen${productId}`}
          />
        </div>
      </div>
      <button class="size-guide-button">Guía de tallas</button>
    </div>
    
  </div>
  <button class="continue-button">Continuar</button>
</article>

<div id={`size-guide-modal-${productId}`} class="size-guide-modal">
  <div class="modal-content">
    <h3>Guía de Tallas</h3>
    <Image src={sizeGuideImage} alt="Guía de tallas" width={400} height={300} />
    <span class="close-modal">&times;</span>
  </div>
</div>

<style define:vars={{ backgroundClass }}>
  .product-card {
    flex: 1;
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.5s ease;
    display: flex;
    flex-direction: column;
    position: relative;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    background-color: var(--backgroundClass);
  }
  .product-card:hover { transform: translateY(-5px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); }
  .product-content {
    padding: 16px;
    color: var(--white-smoke);
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  .product-header { display: flex; justify-content: space-between; align-items: center; z-index: 10; }
  .product-title {  font-weight: bold; margin: 0; }
  
  .product-description {  margin-top: 8px; z-index: 10; }
  .product-details { margin-top: 16px; flex-grow: 1; display: flex; flex-direction: column; align-content: center; }
  .options-container { display: flex; gap: 16px; margin-bottom: 16px; flex-grow: 1; }
  .options-column {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    z-index: 10;
  } 
  .options-box {
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 25px;
    padding: 10px;
    transition: background-color 0.3s ease;
  }
  .option-button {
    display: block;
    width: 100%;
    padding: 8px;
    margin: 4px 0;
    background-color: transparent;
    border: none;
    color: var(--white-smoke);
    text-align: center;
    cursor: pointer;
    border-radius: 15px;
    transition: background-color 0.3s ease;
  }
  .option-button:hover { background-color: rgba(255, 255, 255, 0.3); }
  .option-button.selected { background-color: rgba(255, 255, 255, 0.5); font-weight: bold; }
  .color-button {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    border: 2px solid transparent;
  }
  .color-button.selected {
    border-color: var(--white-smoke);
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.3);
  }
  .product-image {
    flex: 2; align-content: center;
  }
  .product-image img {
        width: 100%; 
        height: auto; 
        border-radius: 8px;
        left: 120px;
        z-index: 0;
        position: absolute;
        top: 0;
        
    }
  .continue-button {
    z-index: 10;
    display: block;
    width: 100%;
    padding: 12px;
    background-color: #f2f2f2cb;
    color: var(--dark-gray);
    border: none;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
    border-radius: 0 0 16px 16px;
  }
  .continue-button:hover {
    background-color: var(--white-smoke);
    transform: translateY(-2px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  .error-message {
    color: rgba(206, 248, 129, 0.851);
    font-size: 12px;
    display: none;
    padding-top: 8px;
  }
  .options-box.error {
    animation: pulse 900ms;
  }
  @keyframes pulse {
    0% { background-color: rgba(250, 190, 190, 0.307); }
    50% { background-color: rgba(253, 107, 107, 0.382); }
    100% { background-color: rgba(251, 24, 24, 0.436); }
  }
  .size-guide-button {
    background: none;
    border: none;
    color: var(--dark-gray);
    text-decoration: underline;
    cursor: pointer;
    padding: 5px;
    margin-top: 10px;
    transition: color 0.3s ease;
    align-self: center;
    z-index: 10;
  }
  .size-guide-button:hover {
    color: var(--lime-green);
  }
  .size-guide-modal {

    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: rgba(0,0,0,0.4);
  }
  .modal-content {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--white-smoke);
    margin: 15% auto;
    gap: 12px;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 600px;
    border-radius: 18px;
  }
  .modal-content img {
    max-width: 100%;
    height: auto;
    object-fit: contain;
  }
  .close-modal {
    align-self: flex-start;
    color: #aaa;
    float: right;
    font-size: 50px;
    font-weight: bold;
    cursor: pointer;
    
  }
  .close-modal:hover,
  .close-modal:focus {
    color: var(--dark-gray);
    text-decoration: none;
    cursor: pointer;
  }

  @media (max-width: 767px) {
    .product-card {
      height: 100px;
      overflow: hidden;
      transition: height 0.3s ease, all 1.2s ease;
    }
    .product-details {
      opacity: 0;
      max-height: 0;
      overflow: hidden;
      transition: opacity 0.3s ease, max-height 0.3s ease;
    }
    .product-card.expanded {
      height: auto;
    }
    .product-card.expanded .product-details {
      opacity: 1;
      max-height: 1000px;
    }
    .continue-button {
      opacity: 0;
      max-height: 0;
      overflow: hidden;
      transition: opacity 0.3s ease, max-height 0.3s ease;
    }
    .product-card.expanded .continue-button {
      opacity: 1;
      max-height: 50px;
    }
    .modal-content{
      flex-direction: column;
      width: 90%;
    }
    .close-modal {
      align-self: center;
    }
  }
</style>

<script define:vars={{ productId, title, price, backgroundClass }}>
document.addEventListener('astro:page-load', () => {
  const productCard = document.getElementById(productId);
  if (!productCard) return;

  const sizeButtons = productCard.querySelectorAll('.size-button');
  const colorButtons = productCard.querySelectorAll('.color-button');
  const continueButton = productCard.querySelector('.continue-button');
  const sizeGuideButton = productCard.querySelector('.size-guide-button');
  const sizeGuideModal = document.getElementById(`size-guide-modal-${productId}`);
  const closeModal = sizeGuideModal.querySelector('.close-modal');
  const sizeBox = productCard.querySelector('.size-options');
  const colorBox = productCard.querySelector('.color-options');

  function selectOption(buttons, clickedButton) {
    buttons.forEach(btn => btn.classList.remove('selected'));
    clickedButton.classList.add('selected');
    clickedButton.closest('.options-box').classList.remove('error');
    clickedButton.closest('.options-column').querySelector('.error-message').style.display = 'none';
  }

  sizeButtons.forEach(button => {
    button.addEventListener('click', () => selectOption(sizeButtons, button));
  });

  colorButtons.forEach(button => {
    button.addEventListener('click', () => {
      selectOption(colorButtons, button);
      const productImage = productCard.querySelector('.product-image img');
      if (productImage) {
        const colorName = button.dataset.identifier;
        productImage.src = `/images/${title}-${colorName}.png`;
      }
    });
  });

  continueButton.addEventListener('click', () => {
    const selectedSize = productCard.querySelector('.size-button.selected');
    const selectedColor = productCard.querySelector('.color-button.selected');
    let isValid = true;

    if (!selectedSize) {
  sizeBox.classList.add('error');
  const errorMessage = sizeBox.nextElementSibling;
  if (errorMessage) errorMessage.style.display = 'block';
  isValid = false;
}

if (!selectedColor) {
  colorBox.classList.add('error');
  const errorMessage = colorBox.nextElementSibling;
  if (errorMessage) errorMessage.style.display = 'block';
  isValid = false;
}

if (isValid) {
  const productData = {
    title: encodeURIComponent(title),
    price: price,
    size: selectedSize.textContent,
    color: selectedColor.dataset.identifier,
    imageUrl: encodeURIComponent(productCard.querySelector('.product-image img').src),
    productId: productId,
    backgroundClass: backgroundClass
  };
  
  const url = new URL('/personalization', window.location.origin);
  Object.keys(productData).forEach(key => 
    url.searchParams.append(key, productData[key])
  );
  
  window.location.href = url.toString();
}
  });

  sizeGuideButton.addEventListener('click', (e) => {
    e.stopPropagation();
    sizeGuideModal.style.display = 'block';
  });

  closeModal.addEventListener('click', () => {
    sizeGuideModal.style.display = 'none';
  });

  window.addEventListener('click', (event) => {
    if (event.target === sizeGuideModal) {
      sizeGuideModal.style.display = 'none';
    }
  });

  function handleExpansion() {
  const productCards = document.querySelectorAll('.product-card');
  const isMobile = window.innerWidth <= 767;

  // Función para cerrar todas las tarjetas expandidas
  const closeAllCards = () => {
    productCards.forEach(card => card.classList.remove('expanded'));
  };

  // Remover todos los event listeners existentes
  function removeAllListeners() {
    document.removeEventListener('click', documentClickHandler);
    productCards.forEach(card => {
      card.removeEventListener('click', cardClickHandler);
      card.removeEventListener('mouseenter', cardMouseEnterHandler);
      card.removeEventListener('mouseleave', cardMouseLeaveHandler);
    });
  }

  // Handler para clics en el documento (para móviles)
  function documentClickHandler(event) {
    if (!event.target.closest('.product-card')) {
      closeAllCards();
    }
  }

  // Handler para clics en las tarjetas (para móviles)
  function cardClickHandler(event) {
    event.stopPropagation();
    if (!this.classList.contains('expanded')) {
      closeAllCards();
      this.classList.add('expanded');
    }
  }

  // Handler para mouseenter (para escritorio)
  function cardMouseEnterHandler() {
    productCards.forEach(card => {
      card.style.flex = card === this ? '3' : '1';
    });
  }

  // Handler para mouseleave (para escritorio)
  function cardMouseLeaveHandler() {
    productCards.forEach(card => {
      card.style.flex = '1';
    });
  }

  // Remover listeners existentes antes de añadir nuevos
  removeAllListeners();

  if (isMobile) {
    // Comportamiento para dispositivos móviles
    document.addEventListener('click', documentClickHandler);

    productCards.forEach(productCard => {
      productCard.addEventListener('click', cardClickHandler);
    });
  } else {
    // Comportamiento para dispositivos de escritorio
    productCards.forEach(productCard => {
      productCard.addEventListener('mouseenter', cardMouseEnterHandler);
      productCard.addEventListener('mouseleave', cardMouseLeaveHandler);
    });
  }
}

  handleExpansion();
  window.addEventListener('resize', handleExpansion);
});
</script>