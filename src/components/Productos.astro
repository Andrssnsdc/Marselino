

<section class="container">
    <h3>Elige tu favorito</h3>
    <div class="products">
        <article class="product-card" id="camisetas">
            <div class="product-content">
                <header class="product-header">
                    <h2 class="product-title">CAMISETA</h2>
                    <span class="product-subtitle">Desde $89.000</span>
                </header>
                <p class="product-description">Incluye 1 bordado personalizado</p>
                <div class="product-details">
                    <div class="options-container">
                        <div class="options-column blue">
                            <div class="options-box">
                                <button class="option-button size-button">S</button>
                                <button class="option-button size-button">M</button>
                                <button class="option-button size-button">L</button>
                                <button class="option-button size-button">XL</button>
                                <button class="option-button size-button">XXL</button>
                            </div>
                            <div class="error-message">Selecciona una talla</div>
                        </div>
                        <div class="options-column">
                            <div class="options-box">
                                <button class="option-button color-button" data-identifier="cafe" style="background-color: #5f342a;"></button>
                                <button class="option-button color-button" data-identifier="verde" style="background-color: #4d5d50;"></button>
                                <button class="option-button color-button" data-identifier="azul" style="background-color: #8da1fa;"></button>
                                <button class="option-button color-button" data-identifier="amarillo" style="background-color: #d1d875;"></button>
                                <button class="option-button color-button" data-identifier="rosa" style="background-color: #c37bbe;"></button>
                            </div>
                            <div class="error-message">Selecciona un color</div>
                        </div>
                        <div class="product-image">
                            <img src="/images/camisa-hero.webp" alt="Camiseta" transition:name="imagen-camiseta">
                        </div>
                    </div>
                </div>
            </div>
            <button class="continue-button">Continuar</button>
        </article>
        <article class="product-card buzos" id="buzos">
            <div class="product-content">
                <header class="product-header">
                    <h2 class="product-title">BUZO</h2>
                    <span class="product-subtitle">Desde $139.000</span>
                </header>
                <p class="product-description">Incluye 1 bordado personalizado</p>
                <div class="product-details">
                    <div class="options-container">
                        <div class="options-column">
                            <div class="options-box red">
                                <button class="option-button size-button">S</button>
                                <button class="option-button size-button">M</button>
                                <button class="option-button size-button">L</button>
                                <button class="option-button size-button">XL</button>
                                <button class="option-button size-button">XXL</button>
                            </div>
                            <div class="error-message">Selecciona una talla</div>
                        </div>
                        <div class="options-column">
                            <div class="options-box">
                                <button class="option-button color-button" data-identifier="cafe" style="background-color: #5f342a;"></button>
                                <button class="option-button color-button" data-identifier="verde" style="background-color: #4d5d50;"></button>
                                <button class="option-button color-button" data-identifier="azul" style="background-color: #8da1fa;"></button>
                                <button class="option-button color-button" data-identifier="amarillo" style="background-color: #d1d875;"></button>
                                <button class="option-button color-button" data-identifier="rosa" style="background-color: #c37bbe;"></button>
                            </div>
                            <div class="error-message">Selecciona un color</div>
                        </div>
                        <div class="product-image">
                            <img src="/images/camisa-hero.webp" alt="Buzo" transition:name="product-image">
                        </div>
                    </div>
                </div>
            </div>
            <button class="continue-button">Continuar</button>
        </article>
    </div>
</section>

<style>
    .container { max-width: 75vw; margin: 0 auto; height: 500px; }
    .products { display: flex; gap: 20px; height: 100%}
    .product-card {
        flex: 1; background-color: var(--medium-blue); border-radius: 16px; overflow: hidden;
        transition: all 0.5s ease; display: flex; flex-direction: column; position: relative;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .product-card:hover { transform: translateY(-5px); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15); }
    .product-card.buzos { background-color: var(--rust-red); }
    .product-content {
        padding: 16px; color: var(--white-smoke); flex-grow: 1;
        display: flex; flex-direction: column;
    }
    .product-header { display: flex; justify-content: space-between; align-items: center; z-index: 10; }
    .product-title { font-size: 1.25rem; font-weight: bold; margin: 0; }
    .product-subtitle { font-size: 0.875rem; }
    .product-description { font-size: 0.75rem; margin-top: 8px; z-index: 10; }
    .product-details { margin-top: 16px; flex-grow: 1; display: flex; flex-direction: column; align-content: center; }
    .options-container { display: flex; gap: 16px; margin-bottom: 16px; flex-grow: 1; }
    .options-column {
        display: flex;
        flex-direction: column-reverse;
        justify-content: flex-end;
        align-items: center;
        z-index: 10;
    } 
    .options-box {
        background-color: rgba(255, 255, 255, 0.1); border-radius: 25px; padding: 10px;
        transition: background-color 0.3s ease;
    }
    .option-button {
        display: block; width: 100%; padding: 8px; margin: 4px 0; background-color: transparent;
        border: none; color: var(--white-smoke); text-align: center; cursor: pointer;
        border-radius: 15px; transition: background-color 0.3s ease;
    }
    .option-button:hover { background-color: rgba(255, 255, 255, 0.3); }
    .option-button.selected { background-color: rgba(255, 255, 255, 0.5); font-weight: bold; }
    .color-button {
        width: 30px; height: 30px; border-radius: 50%;
        border: 2px solid transparent;
    }
    .color-button.selected {
        border-color: var(--white-smoke); box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.3);
    }
    .product-image { flex: 2; align-content: center;}
    .product-image img {
        width: 100%; height: auto; border-radius: 8px;
        left: 120px;
        z-index: 0;
        position: absolute;
        top: 0;
        
    }
    .continue-button {
        display: block; position: absolute;
        bottom: 0;
        left: 0; width: 100%; padding: 12px; background-color: #f2f2f2cb;
        color: var(--dark-gray); border: none; font-weight: bold; cursor: pointer;
        transition: all 0.3s ease; text-transform: uppercase; letter-spacing: 1px;
        border-radius: 0 0 16px 16px;
    }
    .continue-button:hover {
        background-color: var(--white-smoke); transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    @keyframes pulse {
        0% { background-color: rgba(250, 190, 190, 0.307); }
        50% { background-color: rgba(253, 107, 107, 0.382); }
        100% { background-color: rgba(251, 24, 24, 0.436); }
    }
    @media (max-width: 1080px) { .container { max-width: 90vw; height: 400px; } }
    @media (max-width: 767px) {
        .container { max-width: 90vw; }
        .products { flex-direction: column; height: auto; }
        .product-card {
            height: 100px; overflow: hidden;
            transition: height 0.3s ease, all 1.2s ease;
        }
        .options-column{
            margin-bottom: 24px;
        }
        .product-details {
            opacity: 0; max-height: 0; overflow: hidden;
            transition: opacity 0.3s ease, max-height 0.3s ease;
        }
        
        
        .product-card.expanded .product-details { opacity: 1; max-height: 1000px; }
        .continue-button {
            opacity: 0; max-height: 0; overflow: hidden;
            transition: opacity 0.3s ease, max-height 0.3s ease;
        }
        .product-card.expanded .continue-button { opacity: 1; max-height: 50px; }
    }
    .error-message {
        color: rgba(206, 248, 129, 0.851); font-size: 12px; display: none; padding-bottom: 8px;
    }
    .options-box.error {
        animation: pulse 900ms;
    }
</style>

<script >
    // Definir la función para cambiar la imagen del producto
    function changeProductImage(productCard: HTMLElement, identifier: string): void {
        const productImage = productCard.querySelector('.product-image img') as HTMLImageElement | null;
        if (!productImage) return;

        // Reemplaza {img} con el identificador único para formar la URL
        const imageUrl = `./images/${identifier}.png`;

        // Cambiar la imagen del producto
        productImage.src = imageUrl;

        // Almacenar la URL de la imagen seleccionada de manera dinámica
        sessionStorage.setItem('selectedImageUrl', imageUrl);
    }

    // Función para inicializar los eventos
    function initializeEvents(): void {
        const productCards = document.querySelectorAll<HTMLElement>('.product-card');
        const sizeButtons = document.querySelectorAll<HTMLElement>('.size-button');
        const colorButtons = document.querySelectorAll<HTMLElement>('.color-button');
        const continueButtons = document.querySelectorAll<HTMLElement>('.continue-button');

        function adjustLayout(): void {
            const isMobile = window.innerWidth < 768;
            productCards.forEach(card => {
                if (isMobile) {
                    card.classList.remove('expanded');
                    card.style.flex = '1';
                } else {
                    card.style.flex = '1';
                    const productDetails = card.querySelector<HTMLElement>('.product-details');
                    const continueButton = card.querySelector<HTMLElement>('.continue-button');
                    if (productDetails) productDetails.style.display = 'flex';
                    if (continueButton) continueButton.style.display = 'block';
                }
            });
        }

        function expandCard(card: HTMLElement): void {
            const isMobile = window.innerWidth < 768;
            if (isMobile) {
                productCards.forEach(c => c.classList.remove('expanded'));
                card.classList.add('expanded');
            } else {
                productCards.forEach(c => c.style.flex = c === card ? '3' : '1');
            }
        }

        window.addEventListener('resize', adjustLayout);
        adjustLayout();

        productCards.forEach(card => {
            card.addEventListener('click', function(this: HTMLElement) { expandCard(this); });
            card.addEventListener('mouseenter', function(this: HTMLElement) { expandCard(this); });
        });

        document.addEventListener('click', function(event: MouseEvent) {
            let clickedInsideCard = false;
            productCards.forEach(card => {
                if (card.contains(event.target as Node)) {
                    clickedInsideCard = true;
                }
            });

            if (!clickedInsideCard) {
                productCards.forEach(card => {
                    card.classList.remove('expanded');
                });
                adjustLayout();
            }
        });

        function clearError(parent: HTMLElement): void {
            parent.classList.remove('error');
            const errorMessage = parent.nextElementSibling as HTMLElement | null;
            if (errorMessage) errorMessage.style.display = 'none';
        }

        sizeButtons.forEach(button => {
            button.addEventListener('click', function(this: HTMLElement, e: Event) {
                e.stopPropagation();
                const parent = this.closest('.options-box');
                if (!parent) return;
                parent.querySelectorAll<HTMLElement>('.size-button').forEach(btn => btn.classList.remove('selected'));
                this.classList.add('selected');
                clearError(parent);
            });
        });

        colorButtons.forEach(button => {
            button.addEventListener('click', function(this: HTMLElement, e: Event) {
                e.stopPropagation();
                const parent = this.closest('.options-box');
                if (!parent) return;
                parent.querySelectorAll<HTMLElement>('.color-button').forEach(btn => btn.classList.remove('selected'));
                this.classList.add('selected');
                clearError(parent);

                // Obtener el identificador único del botón
                const identifier = this.getAttribute('data-identifier');
                
                // Obtener la tarjeta del producto y cambiar la imagen según el identificador
                const productCard = this.closest('.product-card');
                if (productCard && identifier) {
                    changeProductImage(productCard, identifier);
                }
            });
        });

        continueButtons.forEach(button => {
            button.addEventListener('click', function(this: HTMLElement, e: Event) {
                e.stopPropagation();
                const productCard = this.closest('.product-card');
                if (!productCard) return;

                const sizeBox = productCard.querySelector<HTMLElement>('.options-column:nth-child(1) .options-box');
                const colorBox = productCard.querySelector<HTMLElement>('.options-column:nth-child(2) .options-box');
                const selectedSize = sizeBox?.querySelector<HTMLElement>('.size-button.selected');
                const selectedColor = colorBox?.querySelector<HTMLElement>('.color-button.selected');

                let isValid = true;

                if (!selectedSize && sizeBox) {
                    sizeBox.classList.add('error');
                    const errorMessage = sizeBox.nextElementSibling as HTMLElement | null;
                    if (errorMessage) errorMessage.style.display = 'block';
                    isValid = false;
                } else if (sizeBox) {
                    clearError(sizeBox);
                }

                if (!selectedColor && colorBox) {
                    colorBox.classList.add('error');
                    const errorMessage = colorBox.nextElementSibling as HTMLElement | null;
                    if (errorMessage) errorMessage.style.display = 'block';
                    isValid = false;
                } else if (colorBox) {
                    clearError(colorBox);
                }

                if (isValid && selectedSize && selectedColor) {
                    const productTitle = productCard.querySelector('.product-title')?.textContent || '';
                    const productImage = productCard.querySelector<HTMLImageElement>('.product-image img');
                    
                    const productData = {
                        title: productTitle,
                        size: selectedSize.textContent || '',
                        color: selectedColor.style.backgroundColor,
                        imageUrl: productImage ? productImage.src : ''
                    };
                    
                    sessionStorage.setItem('selectedProduct', JSON.stringify(productData));
                    window.location.href = '/personalization';
                }
            });
        });
    }

    // Ejecutar la inicialización cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', initializeEvents);

    // Volver a inicializar los eventos después de una transición de vista
    document.addEventListener('astro:page-load', initializeEvents);
</script>