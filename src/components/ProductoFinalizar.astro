
<section class="fullscreen-section">
    <div class="container">
        <h1>CAMISETAS</h1>
        <div class="product-container">
            <div class="product-image-container">
                <img src="" alt="Camiseta" id="productImage" transition:name="imagen-camiseta">
                <div class="svg-container" id="svgContainer"></div>
                <p style="color: var(--white-smoke); font-size: 24px;">100% algodón</p>
            </div>
            <div class="product-options">
                <div class="option-group">
                    <div class="option-title">¿Cuántos bordados quieres?</div>
                    <div class="option-buttons" id="embroideryCount">
                        <button class="option-button active" data-count="1">1</button>
                        <button class="option-button" data-count="2">2</button>
                        <button class="option-button" data-count="3">3</button>
                    </div>
                    <div class="error-message" id="countError"></div>
                </div>
                <div class="option-group">
                    <div class="option-title">¿Dónde quieres los bordados?</div>
                    <div class="option-buttons" id="embroideryPosition">
                        <button class="option-button active" data-position="Izquierda">Izquierda</button>
                        <button class="option-button" data-position="Centro">Centro</button>
                        <button class="option-button" data-position="Derecha">Derecha</button>
                    </div>
                    <div class="error-message" id="positionError"></div>
                </div>
                <div class="file-input-container">
                    <label for="fileInput" class="file-input-button">Carga las fotos que quieres bordar</label>
                    <input type="file" id="fileInput" class="file-input" accept=".jpg,.jpeg,.png" multiple>
                    <div class="error-message" id="errorMessage"></div>
                    <div class="preview-images" id="previewImages"></div>
                </div>
                <div class="total" id="totalPrice">Total: $ 129.000</div>
                <div class="action-buttons">
                    <button class="action-button add-to-cart" id="addToCartButton">Añadir al carrito</button>
                    <button class="action-button cancel" id="cancelButton">Cancelar</button>
                    <button class="action-button buy-now" id="buyNowButton">Finalizar compra</button>
                </div>
            </div>
        </div>
    </div>
</section>

<style is:global>

 
    h1{
        color: var(--white-smoke);
    }
    .fullscreen-section {
        background: linear-gradient(to bottom, rgba(38, 61, 191, 0.608) 96%, rgba(236, 236, 236, 0) 100%);
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        position: absolute;
        top: 50px;
        border: none;
        
    }

    .container {
        max-width: 1200px;
        width: 100%;
        margin: 0 auto;
        padding: 20px;
        position: absolute;
    }

    .product-container {
        display: flex;
        flex-direction: column;
        background-color: #f2f2f21b;
        border-radius: 10px;
        overflow: hidden;
    }

    .product-image-container {
        
        padding: 20px;
        text-align: center;
        position: relative;
    }

    .product-image-container img {
        max-width: 100%;
        height: auto;
        display: block;
        margin: 0 auto;
    }

    .product-options {
        background-color: var(--medium-blue);
        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        align-items: center;
        padding:36px 12px;
        gap: 28px;
    }

    .option-group {
        align-items: center;
        flex-direction: column;
        display: flex;
        
    }

    .option-title {
        margin-bottom: 10px;
        font-weight: bold;
        color: var(--white-smoke);
        font-size: 18px;
    }

    .option-buttons {
        display: flex;
        gap: 10px;
    }

    .option-button {
        background-color: var(--deep-blue);
        border: none;
        color: var(--white-smoke);
        padding: 10px 20px;
        border-radius: 20px;
        cursor: pointer;
        text-align: center;
        display: flex;
        justify-content: center;
        font-size: 16px;
    }

    .option-button.active {
        background-color: var(--white-smoke);
        color: var(--deep-blue);
    }

    .file-input-container {
        
    }

    .file-input-button {
        background-color: #f2f2f2d8;
        color: var(--deep-blue);
        padding: 10px 20px;
        border-radius: 20px;
        cursor: pointer;
        display: inline-block;
        font-size: 18px;
    }
    .file-input-button:hover{
        background-color: #f2f2f2;
        transition: ease-in-out 300ms;
        transform: scale(1.02);
    }

    .file-input {
        display: none;
    }

    .total {
        font-size: 1.2em;
        font-weight: bold;
        margin-bottom: 20px;
        color: var(--white-smoke);
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        gap: 12px; 
    }

    .action-button {
        flex: 1;
        padding: 10px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        font-weight: bold;
    }
    .action-button:hover{
        transition: ease-in-out 300ms;
        transform: scale(1.02);
    }

    .add-to-cart,
    .cancel {
        flex: 1 1 45%;
    }

    .buy-now {
        flex: 1 100%;
    }

    .add-to-cart {
        background-color: var(--white-smoke);
        color: var(--deep-blue);
    }

    .cancel {
        background-color: var(--rust-red);
        color: var(--dark--grey);
    }

    .buy-now {
        background-color: var(--lime-green);
        color: var(--dark--grey);
    }

    .error-message {
        color: var(--lime-green);
        margin-top: 10px;
    }

    .preview-images {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
    }

    .preview-image-container {
        width: 100px;
        height: 100px;
        position: relative;
        overflow: hidden;
        margin: 5px;
        display: inline-block;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .preview-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .remove-image {
        position: absolute;
        top: 5px;
        right: 5px;
        background-color: rgba(255, 0, 0, 0.7);
        color: white;
        border: none;
        width: 20px;
        height: 20px;
        font-size: 12px;
        cursor: pointer;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .svg-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }

    .alert-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .alert-box {
        background-color: var(--white-smoke);
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        max-width: 80%;
        
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .alert-buttons {
        display: flex;
        justify-content: space-around;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        font-weight: bold;
        
    }

    .alert-buttons button {
        padding: 10px 20px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

    .alert-buttons .cancel {
        background-color: var(--rust-red);
        color: var(--white-smoke);
        max-width: 45%;
    }

    .alert-buttons .cancel:hover {
        background-color: #a33d24;
    }

    .alert-buttons .add-to-cart {
        background-color: var(--deep-blue);
        color: var(--white-smoke);
        max-width: 45%;
    }

    .alert-buttons .add-to-cart:hover {
        background-color: #1e2f8f;
    }
    .success-message {
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: #4CAF50;
    color: white;
    padding: 16px;
    border-radius: 4px;
    z-index: 1000;
  }

  .status-indicator {
    position: absolute;
    bottom: 5px;
    left: 5px;
    background-color: rgba(0, 255, 0, 0.7);
    color: white;
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 12px;
}

.status-indicator.failed {
    background-color: rgba(255, 0, 0, 0.7);
}
  @keyframes flyToCart {
        0% {
            transform: scale(1);
            opacity: 1;
        }
        100% {
            transform: translate(calc(100vw - 100%), calc(-100vh + 100%)) scale(0.1);
            opacity: 0;
        }
    }

    .flying-item {
        position: fixed;
        z-index: 1000;
        pointer-events: none;
    }
    @media (min-width: 768px) {
        .product-container {
            flex-direction: row;
        }
        .product-image-container,
        .product-options {
            flex: 1;
            
        }
        .product-options {
            padding: 40px 86px;

        }
        .alert-box{
            padding: 10px;
           
        }
        .action-buttons{
            gap: 30px;
        }
        .option-title {
        
        font-size: 24px;
    }
    .option-button{
        font-size: 18px;
    }
        
    }
</style>

<script>
  interface ProductData {
    title?: string;
    imageUrl?: string;
    price?: string;
    color?: string;
    size?: string;
    embroideryCount?: number;
    selectedPositions?: string[];
    uploadedImages?: string[];
    basePrice?: number;
    totalPrice?: number;
    quantity?: number;
}

let basePrice: number = 129000;
let embroideryCount: number = 1;
let selectedPositions: string[] = ['Izquierda'];
let uploadedImages: string[] = [];
let selectedProduct: ProductData = {};

function initializeComponent() {
    const productImage = document.getElementById('productImage') as HTMLImageElement;
    const embroideryCountButtons = document.querySelectorAll('#embroideryCount .option-button');
    const embroideryPositionButtons = document.querySelectorAll('#embroideryPosition .option-button');
    const fileInput = document.getElementById('fileInput') as HTMLInputElement;
    const errorMessage = document.getElementById('errorMessage') as HTMLDivElement;
    const previewImages = document.getElementById('previewImages') as HTMLDivElement;
    const svgContainer = document.getElementById('svgContainer') as HTMLDivElement;
    const cancelButton = document.getElementById('cancelButton') as HTMLButtonElement;
    const addToCartButton = document.getElementById('addToCartButton') as HTMLButtonElement;
    const buyNowButton = document.getElementById('buyNowButton') as HTMLButtonElement;
    const countError = document.getElementById('countError') as HTMLDivElement;
    const positionError = document.getElementById('positionError') as HTMLDivElement;

    const savedImageUrl = sessionStorage.getItem('selectedImageUrl');
    if (savedImageUrl) {
        productImage.src = savedImageUrl;
    }
    selectedProduct = JSON.parse(sessionStorage.getItem('selectedProduct') || '{}');
    if (selectedProduct) {
        const titleElement = document.querySelector('h1');
        if (titleElement) titleElement.textContent = selectedProduct.title || 'CAMISETAS';
        productImage.src = selectedProduct.imageUrl || '';
        basePrice = parseInt(selectedProduct.price || '') || basePrice;
        updateTotalPrice();
    }

    function updateTotalPrice() {
        const totalPrice = basePrice + ((embroideryCount - 1) * 30000);
        const totalPriceElement = document.getElementById('totalPrice');
        if (totalPriceElement) {
            totalPriceElement.textContent = `Total: $ ${totalPrice.toLocaleString()}`;
        }
    }

    function updateEmbroideryCount(count: number) {
        embroideryCount = count;
        selectedPositions = selectedPositions.slice(0, count);
        embroideryCountButtons.forEach(button => {
            button.classList.toggle('active', (button as HTMLButtonElement).dataset.count == count.toString());
        });
        updatePositionButtons();
        updateSVGPositions();
        updateTotalPrice();
        
        while (uploadedImages.length > count) {
            uploadedImages.pop();
            if (previewImages.lastChild) {
                previewImages.removeChild(previewImages.lastChild);
            }
        }
    }

    function updatePositionButtons() {
        embroideryPositionButtons.forEach(button => {
            const btnElement = button as HTMLButtonElement;
            btnElement.disabled = selectedPositions.length >= embroideryCount && !selectedPositions.includes(btnElement.dataset.position || '');
            btnElement.classList.remove('active');
        });
        selectedPositions.forEach(position => {
            const button = Array.from(embroideryPositionButtons).find(btn => (btn as HTMLButtonElement).dataset.position === position);
            if (button) button.classList.add('active');
        });
    }

    function togglePosition(position: string) {
        if (selectedPositions.includes(position)) {
            selectedPositions = selectedPositions.filter(p => p !== position);
        } else if (selectedPositions.length < embroideryCount) {
            selectedPositions.push(position);
        }
        updatePositionButtons();
        updateSVGPositions();
    }

    function updateSVGPositions() {
        svgContainer.innerHTML = '';
        const positionMap: {[key: string]: {x: string, count: number}} = {
            'Izquierda': { x: '20%', count: 0 },
            'Centro': { x: '50%', count: 0 },
            'Derecha': { x: '80%', count: 0 }
        };

        for (let i = 0; i < embroideryCount; i++) {
            const position = selectedPositions[i % selectedPositions.length];
            positionMap[position].count++;
        }

        for (const position in positionMap) {
            const { x, count } = positionMap[position];
            for (let i = 0; i < count; i++) {
                const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                svg.setAttribute("width", "20");
                svg.setAttribute("height", "20");
                svg.setAttribute("viewBox", "0 0 20 20");
                svg.setAttribute("fill", "none");
                svg.innerHTML = '<circle cx="10" cy="10" r="10" fill="#BF472C" fill-opacity="0.58"/>';

                svg.style.position = 'absolute';
                svg.style.left = x;
                svg.style.top = `${20 + i * 25}%`;
                svgContainer.appendChild(svg);
            }
        }
    }

    function validateSelection(): boolean {
        let isValid = true;
        if (embroideryCount === 0) {
            countError.textContent = 'Por favor, selecciona el número de bordados.';
            isValid = false;
        } else {
            countError.textContent = '';
        }
        if (selectedPositions.length === 0) {
            positionError.textContent = 'Por favor, selecciona al menos una posición para el bordado.';
            isValid = false;
        } else {
            positionError.textContent = '';
        }
        if (uploadedImages.length !== embroideryCount) {
            errorMessage.textContent = `Por favor, sube ${embroideryCount} imagen${embroideryCount > 1 ? 'es' : ''} para los bordados.`;
            isValid = false;
        } else {
            errorMessage.textContent = '';
        }
        return isValid;
    }

    function showCancelAlert() {
        const alertOverlay = document.createElement('div');
        alertOverlay.className = 'alert-overlay';
        alertOverlay.innerHTML = `
            <div class="alert-box">
                <p>¿Estás seguro de que quieres cancelar? Tu selección no quedará guardada.</p>
                <div class="alert-buttons">
                    <button id="alert-confirm" class="action-button cancel">Sí, cancelar</button>
                    <button id="alert-cancel" class="action-button add-to-cart">No, continuar</button>
                </div>
            </div>
        `;
        document.body.appendChild(alertOverlay);

        const confirmButton = alertOverlay.querySelector('#alert-confirm');
        if (confirmButton) {
            confirmButton.addEventListener('click', () => {
                window.location.href = '/';
            });
        }

        const cancelAlertButton = alertOverlay.querySelector('#alert-cancel');
        if (cancelAlertButton) {
            cancelAlertButton.addEventListener('click', () => {
                document.body.removeChild(alertOverlay);
            });
        }
    }

    function updateCartCount() {
        const cart = JSON.parse(sessionStorage.getItem('cart') || '[]');
        const cartCount = document.getElementById('cartCount') as HTMLElement;
        if (cartCount) {
            cartCount.textContent = cart.length.toString();
        }
    }

    function addToCart(finishPurchase: boolean = false) {
        if (validateSelection()) {
            const productData: ProductData = {
                ...selectedProduct,
                embroideryCount,
                selectedPositions,
                uploadedImages,
                basePrice,
                totalPrice: basePrice + (embroideryCount - 1) * 30000,
                quantity: 1
            };

            let cart = JSON.parse(sessionStorage.getItem('cart') || '[]');
            cart.push(productData);
            sessionStorage.setItem('cart', JSON.stringify(cart));

            updateCartCount();
            showSuccessMessage('Producto añadido al carrito');
            animateAddToCart();

            setTimeout(() => {
                closePersonalizationWithAnimation();
                resetSelection();
                if (finishPurchase) {
                    openCart();
                } else {
                    window.history.back();
                }
            }, 1000);
        }
    }

    function animateAddToCart() {
        const productImage = document.getElementById('productImage') as HTMLImageElement;
        const flyingItem = productImage.cloneNode() as HTMLImageElement;
        flyingItem.className = 'flying-item';
        flyingItem.style.position = 'fixed';
        const rect = productImage.getBoundingClientRect();
        flyingItem.style.left = `${rect.left}px`;
        flyingItem.style.top = `${rect.top}px`;
        flyingItem.style.width = `${rect.width}px`;
        flyingItem.style.height = `${rect.height}px`;
        document.body.appendChild(flyingItem);

        flyingItem.animate([
            { transform: 'scale(1)', opacity: 1 },
            { transform: 'translate(calc(100vw - 100%), calc(-100vh + 100%)) scale(0.1)', opacity: 0 }
        ], {
            duration: 1000,
            easing: 'ease-in-out'
        }).onfinish = () => {
            document.body.removeChild(flyingItem);
        };
    }

    function closePersonalizationWithAnimation() {
        const personalizationContainer = document.querySelector('.fullscreen-section') as HTMLElement;
        personalizationContainer.style.transition = 'opacity 0.5s ease-out';
        personalizationContainer.style.opacity = '0';
        setTimeout(() => {
            personalizationContainer.style.display = 'none';
        }, 500);
    }

    function resetSelection() {
        embroideryCount = 1;
        selectedPositions = ['Izquierda'];
        uploadedImages = [];
        updateEmbroideryCount(1);
        updateSVGPositions();
        updateTotalPrice();
        previewImages.innerHTML = '';
        errorMessage.textContent = '';
        countError.textContent = '';
        positionError.textContent = '';
        if (fileInput) fileInput.value = '';
    }

    function openCart() {
        const cartButton = document.getElementById('openCart') as HTMLElement;
        if (cartButton) {
            cartButton.click();
        }
    }

    function showSuccessMessage(message: string) {
        const successMessage = document.createElement('div');
        successMessage.className = 'success-message';
        successMessage.textContent = message;
        document.body.appendChild(successMessage);
        setTimeout(() => {
            document.body.removeChild(successMessage);
        }, 3000);
    }

    embroideryCountButtons.forEach(button => {
        button.addEventListener('click', () => {
            const count = parseInt((button as HTMLButtonElement).dataset.count || '1');
            updateEmbroideryCount(count);
        });
    });

    embroideryPositionButtons.forEach(button => {
        button.addEventListener('click', () => {
            const position = (button as HTMLButtonElement).dataset.position;
            if (position) togglePosition(position);
        });
    });

    fileInput.addEventListener('change', (event) => {
        const files = Array.from((event.target as HTMLInputElement).files || []);
        errorMessage.textContent = '';

        if (files.length > embroideryCount - uploadedImages.length) {
            errorMessage.textContent = `Solo puedes subir ${embroideryCount - uploadedImages.length} imágenes máximo.`;
            return;
        }

        files.forEach(file => {
            if (file.size > 10 * 1024 * 1024) {
                errorMessage.textContent = 'El archivo no debe superar los 10 MB';
                return;
            }
            if (!['image/jpeg', 'image/png'].includes(file.type)) {
                errorMessage.textContent = 'Solo se permiten archivos JPG y PNG';
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                if (uploadedImages.length < embroideryCount && e.target) {
                    const imgContainer = document.createElement('div');
                    imgContainer.className = 'preview-image-container';
                    
                    const img = document.createElement('img');
                    img.src = e.target.result as string;
                    img.classList.add('preview-image');
                    
                    const removeButton = document.createElement('button');
                    removeButton.className = 'remove-image';
                    removeButton.textContent = 'X';
                    removeButton.addEventListener('click', () => {
                        previewImages.removeChild(imgContainer);
                        uploadedImages = uploadedImages.filter(img => img !== e.target?.result);
                    });
                    
                    const statusIndicator = document.createElement('div');
                    statusIndicator.className = 'status-indicator';
                    statusIndicator.textContent = 'Cargada';
                    
                    imgContainer.appendChild(img);
                    imgContainer.appendChild(removeButton);
                    imgContainer.appendChild(statusIndicator);
                    previewImages.appendChild(imgContainer);

                    uploadedImages.push(e.target.result as string);
                }
            };
            reader.onerror = () => {
                const failedIndicator = document.createElement('div');
                failedIndicator.className = 'status-indicator failed';
                failedIndicator.textContent = 'Error al cargar';
                previewImages.appendChild(failedIndicator);
            };
            reader.readAsDataURL(file);
        });
    });

    cancelButton.addEventListener('click', showCancelAlert);
    addToCartButton.addEventListener('click', () => addToCart(false));
    buyNowButton.addEventListener('click', () => addToCart(true));

    // Inicialización
    updateEmbroideryCount(1);
    updateSVGPositions();
    updateTotalPrice();
    updateCartCount();
}

// Usar el evento 'astro:page-load' para la carga inicial y las navegaciones posteriores
document.addEventListener('astro:page-load', initializeComponent);

// Actualizar el carrito cuando cambia el almacenamiento de sesión
window.addEventListener('storage', (event) => {
    if (event.key === 'cart') {
        const cartCount = document.getElementById('cartCount') as HTMLElement;
        if (cartCount) {
            const cart = JSON.parse(event.newValue || '[]');
            cartCount.textContent = cart.length.toString();
        }
    }
});
  </script>