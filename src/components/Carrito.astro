
---
// CartComponent.astro
---

<div class="container">
  <button class="cart-button" id="openCart">
    🛒 Carrito <span class="cart-count" id="cartCount">0</span>
  </button>
</div>

<div class="cart-panel" id="cartPanel">
  <div class="cart-header">
    <h2>Carrito de Compras</h2>
    <button class="close-cart" id="closeCart">&times;</button>
  </div>
  <div class="cart-items" id="cartItems"></div>
  <div class="cart-total" id="cartTotal">Total: $0.00</div>
  <textarea id="customerComments" placeholder="Deja tus comentarios aquí" class="customer-comments"></textarea>
  <button class="checkout-btn" id="checkoutBtn">Proceder al pago</button>
</div>

<div class="overlay" id="overlay"></div>

<div class="alert" id="deleteAlert">
  <p>¿Estás seguro de que quieres eliminar este producto?</p>
  <div class="alert-buttons">
    <button class="alert-btn confirm-btn" id="confirmDelete">Sí, eliminar</button>
    <button class="alert-btn cancel-btn" id="cancelDelete">Cancelar</button>
  </div>
</div>

<style is:global>
  :root {
    --deep-blue: #1a237e;
    --medium-blue: #3949ab;
    --lime-green: #cddc39;
    --rust-red: #bf472c;
    --white-smoke: #f5f5f5;
    --dark-gray: #333333;
    --lilac: #e6e6fa;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  .cart-button {
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: var(--deep-blue);
    color: var(--white-smoke);
    border: none;
    padding: 10px 15px;
    border-radius: 9999px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
    gap: 8px;
    z-index: 1000;
    transition: background-color 0.3s ease;
  }

  .cart-button:hover {
    background-color: var(--medium-blue);
  }

  .cart-count {
    background-color: var(--lime-green);
    color: var(--dark-gray);
    border-radius: 9999px;
    padding: 2px 6px;
    font-size: 12px;
  }

  .cart-panel {
    position: fixed;
    top: 0;
    right: -400px;
    width: 100%;
    max-width: 400px;
    height: 100%;
    background-color: var(--white-smoke);
    box-shadow: -2px 0 5px rgba(0,0,0,0.1);
    transition: right 0.3s ease-out;
    overflow-y: auto;
    z-index: 1001;
  }

  .cart-panel.open {
    right: 0;
  }

  .cart-header {
    background-color: var(--deep-blue);
    color: var(--white-smoke);
    padding: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .cart-header h2 {
    font-size: 24px;
    font-weight: 600;
  }

  .close-cart {
    background: none;
    border: none;
    color: var(--white-smoke);
    font-size: 24px;
    cursor: pointer;
  }

  .cart-items {
    padding: 20px;
  }

  .cart-item {
    display: flex;
    flex-direction: row;
    border: 1px solid var(--medium-blue);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    gap: 10px;
  }

  .item-details {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    margin-bottom: 10px;
  }

  .item-name {
    font-weight: 600;
    font-size: 18px;
    color: var(--deep-blue);
  }

  

  .item-price {
    color: var(--rust-red);
    font-weight: 600;
    text-align: end;
  }

  .item-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 10px;
  }

  .quantity-control {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .quantity-btn {
    background-color: var(--deep-blue);
    color: var(--white-smoke);
    border: none;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    font-size: 18px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s ease;
  }

  .quantity-btn:hover {
    background-color: var(--medium-blue);
  }

  .quantity {
    margin: 0 10px;
    font-size: 16px;
  }

  .delete-btn {
    background-color: var(--rust-red);
    color: var(--white-smoke);
    border: none;
    
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    align-self: center;
    align-items: center;
    display: flex;
    justify-content: center;
    height: 40px;
    align-self: start;
  }

  .delete-btn:hover {
    background-color: #913620;
  }

  .cart-total {
    background-color: var(--lilac);
    color: var(--dark-gray);
    padding: 20px;
    font-size: 20px;
    font-weight: bold;
    text-align: right;
  }

  .customer-comments {
    width: 100%;
    height: 100px;
    margin: 20px 0;
    padding: 10px;
    border: 1px solid var(--medium-blue);
    border-radius: 4px;
    resize: vertical;
  }

  .checkout-btn {
    display: block;
    width: 100%;
    padding: 15px;
    background-color: var(--lime-green);
    color: var(--dark-gray);
    border: none;
    border-radius: 5px;
    font-size: 18px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .checkout-btn:hover {
    background-color: #b9c45f;
  }

  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    display: none;
    z-index: 999;
  }

  .alert {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: var(--white-smoke);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    z-index: 1002;
    display: none;
  }

  .alert-buttons {
    margin-top: 20px;
    text-align: right;
  }

  .alert-btn {
    padding: 8px 15px;
    margin-left: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .confirm-btn {
    background-color: var(--deep-blue);
    color: var(--white-smoke);
  }

  .confirm-btn:hover {
    background-color: var(--medium-blue);
  }

  .cancel-btn {
    background-color: var(--rust-red);
    color: var(--white-smoke);
    
  }

  .cancel-btn:hover {
    background-color: #a33d24;
  }

  .empty-cart {
    text-align: center;
    padding: 40px 20px;
  }

  .empty-cart p {
    font-size: 18px;
    color: var(--medium-blue);
    margin-bottom: 20px;
  }

  .add-products-btn {
    background-color: var(--deep-blue);
    color: var(--white-smoke);
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .add-products-btn:hover {
    background-color: var(--medium-blue);
  }

  .item-image {
    
    width: 100%;
    max-width: 150px;
    height: auto;
    object-fit: cover;
    margin-right: 15px;
  }

  .item-info {
    font-size: 14px;
    color: var(--dark-gray);
    margin-bottom: 5px;
  }
</style>

<script>
 interface CartItem {
    title: string; // Título del producto
    size: string; // Talla del producto
    color: string; // Color del producto
    embroideryCount: number; // Número de bordados
    selectedPositions: string[]; // Posiciones seleccionadas para el bordado
    imageUrl: string; // URL de la imagen del producto
    quantity: number; // Cantidad de productos en el carrito
    totalPrice: number; // Precio total del producto
}

// Arreglo para almacenar los artículos del carrito
let cart: CartItem[] = [];
let itemToDelete: number | null = null; // Almacena el índice del artículo a eliminar

function initializeCart(): void {
    // Selecciona elementos del DOM
    const cartButton = document.getElementById('openCart') as HTMLElement;
    const cartPanel = document.getElementById('cartPanel') as HTMLElement;
    const closeCart = document.getElementById('closeCart') as HTMLElement;
    const cartItems = document.getElementById('cartItems') as HTMLElement;
    const cartTotal = document.getElementById('cartTotal') as HTMLElement;
    const cartCount = document.getElementById('cartCount') as HTMLElement;
    const overlay = document.getElementById('overlay') as HTMLElement;
    const checkoutBtn = document.getElementById('checkoutBtn') as HTMLElement;
    const deleteAlert = document.getElementById('deleteAlert') as HTMLElement;
    const confirmDelete = document.getElementById('confirmDelete') as HTMLElement;
    const cancelDelete = document.getElementById('cancelDelete') as HTMLElement;

    // Cargar el carrito guardado en el sessionStorage
    function loadCart(): void {
        const savedCart = sessionStorage.getItem('cart');
        if (savedCart) {
            cart = JSON.parse(savedCart);
            updateCartDisplay(); // Actualiza la visualización del carrito
        }
    }

    // Actualizar la visualización del carrito
    function updateCartDisplay(): void {
        cartItems.innerHTML = ''; // Limpia los elementos actuales del carrito
        let total = 0;
        let count = 0;

        // Si el carrito está vacío, muestra un mensaje
        if (cart.length === 0) {
            cartItems.innerHTML = `
                <div class="empty-cart">
                    <p>Tu carrito está vacío</p>
                    <button class="add-products-btn" onclick="window.location.href='/'">Agregar productos</button>
                </div>
            `;
        } else {
            // Recorre cada artículo en el carrito y actualiza la visualización
            cart.forEach((item, index) => {
                const itemTotal = item.totalPrice * item.quantity; // Calcula el total por artículo
                total += itemTotal; // Acumula el total general
                count += item.quantity; // Acumula la cantidad total

                // Crear el elemento visual del artículo en el carrito
                const itemElement = document.createElement('div');
                itemElement.classList.add('cart-item');
                itemElement.innerHTML = `
                    <img src="${item.imageUrl}" alt="${item.title}" class="item-image">
                    <div class="item-details">
                        <div class="item-name">${item.title}</div>
                        <div class="item-info">Talla: ${item.size}</div>
                        <div class="item-info">Color: ${item.color}</div>
                        <div class="item-info">Bordados: ${item.embroideryCount}</div>
                        <div class="item-info">Posiciones: ${item.selectedPositions.join(', ')}</div>
                        <div class="item-price">$${itemTotal.toLocaleString()}</div>
                        <div class="item-controls">
                            <div class="quantity-control">
                                <button class="quantity-btn minus" data-index="${index}">-</button>
                                <span class="quantity">${item.quantity}</span>
                                <button class="quantity-btn plus" data-index="${index}">+</button>
                            </div> 
                        </div>
                        
                    </div>
                    <button class="delete-btn" data-index="${index}"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="24.975609756097562" viewBox="0 0 1025 1024"><path fill="#f2f2f2" d="M960.865 192h-896q-26 0-45-18.5t-19-45t18.5-45.5t45.5-19h320q0-26 18.5-45t45.5-19h128q27 0 45.5 19t18.5 45h320q26 0 45 19t19 45.5t-19 45t-45 18.5m0 704q0 53-37.5 90.5t-90.5 37.5h-640q-53 0-90.5-37.5t-37.5-90.5V256h896zm-640-448q0-26-19-45t-45.5-19t-45 19t-18.5 45v384q0 27 18.5 45.5t45 18.5t45.5-18.5t19-45.5zm256 0q0-26-19-45t-45.5-19t-45 19t-18.5 45v384q0 27 18.5 45.5t45 18.5t45.5-18.5t19-45.5zm256 0q0-26-19-45t-45.5-19t-45 19t-18.5 45v384q0 27 18.5 45.5t45 18.5t45.5-18.5t19-45.5z"/></svg></button>
                `;
                cartItems.appendChild(itemElement); // Añadir el nuevo elemento al carrito
            });
        }

        // Actualiza el total y la cuenta de artículos en el carrito
        cartTotal.textContent = `Total: $${total.toLocaleString()}`;
        cartCount.textContent = count.toString();
        sessionStorage.setItem('cartTotal', total.toString()); // Guardar el total en el sessionStorage
    }

    // Funciones para abrir y cerrar el carrito
    function openCart(): void {
        cartPanel.classList.add('open');
        overlay.style.display = 'block'; // Muestra la superposición
    }

    function closeCartPanel(): void {
        cartPanel.classList.remove('open');
        overlay.style.display = 'none'; // Oculta la superposición
    }

    // Mostrar alerta de eliminación de un artículo
    function showDeleteAlert(index: number): void {
        itemToDelete = index; // Guarda el índice del artículo a eliminar
        deleteAlert.style.display = 'block'; // Muestra la alerta
        overlay.style.display = 'block'; // Muestra la superposición
    }

    // Ocultar alerta de eliminación
    function hideDeleteAlert(): void {
        deleteAlert.style.display = 'none'; // Oculta la alerta
        overlay.style.display = 'none'; // Oculta la superposición
        itemToDelete = null; // Reinicia el índice
    }

    // Configurar eventos de clic
    cartButton.addEventListener('click', openCart); // Abre el carrito
    closeCart.addEventListener('click', closeCartPanel); // Cierra el carrito
    overlay.addEventListener('click', (e) => {
        if (e.target === overlay) {
            closeCartPanel(); // Cierra el carrito si se hace clic en la superposición
            hideDeleteAlert(); // Oculta la alerta de eliminación
        }
    });

    // Manejar clics en los elementos del carrito
    cartItems.addEventListener('click', (e) => {
        if (e.target instanceof HTMLElement && e.target.classList.contains('quantity-btn')) {
            const index = parseInt(e.target.getAttribute('data-index') || '0');
            if (e.target.classList.contains('plus')) {
                cart[index].quantity++; // Aumenta la cantidad
            } else if (e.target.classList.contains('minus')) {
                if (cart[index].quantity > 1) {
                    cart[index].quantity--; // Disminuye la cantidad
                } else {
                    showDeleteAlert(index); // Muestra alerta si la cantidad es 1
                    return;
                }
            }
            sessionStorage.setItem('cart', JSON.stringify(cart)); // Guarda el carrito en el sessionStorage
            updateCartDisplay(); // Actualiza la visualización del carrito
        } else if (e.target instanceof HTMLElement && e.target.classList.contains('delete-btn')) {
            const index = parseInt(e.target.getAttribute('data-index') || '0');
            showDeleteAlert(index); // Muestra alerta de eliminación
        }
    });

    // Confirmar eliminación de un artículo
    confirmDelete.addEventListener('click', () => {
        if (itemToDelete !== null) {
            cart.splice(itemToDelete, 1); // Elimina el artículo del carrito
            sessionStorage.setItem('cart', JSON.stringify(cart)); // Guarda el carrito actualizado
            updateCartDisplay(); // Actualiza la visualización del carrito
        }
        hideDeleteAlert(); // Oculta la alerta de eliminación
    });

    cancelDelete.addEventListener('click', hideDeleteAlert); // Cierra la alerta si se cancela

    // Manejar clic en el botón de checkout
    checkoutBtn.addEventListener('click', () => {
        const comments = (document.getElementById('customerComments') as HTMLInputElement).value; // Obtener comentarios
        sessionStorage.setItem('customerComments', comments); // Guarda comentarios en el sessionStorage
        console.log('Procediendo al pago');
        window.location.href = '/checkout'; // Redirige al usuario a la página de pago
    });

    loadCart(); // Cargar el carrito al inicializar

    // Escuchar cambios en el sessionStorage
    window.addEventListener('storage', (event) => {
        if (event.key === 'cart') {
            cart = JSON.parse(event.newValue || '[]'); // Actualiza el carrito si hay cambios en el sessionStorage
            updateCartDisplay(); // Actualiza la visualización del carrito
        }
    });

    // Evento personalizado para actualizar el carrito
    document.addEventListener('cartUpdated', () => {
        loadCart(); // Cargar el carrito al recibir la actualización
    });
}

// Inicializa el carrito al cargar la página y después de transiciones de vista
document.addEventListener('astro:page-load', initializeCart);
document.addEventListener('astro:after-swap', initializeCart);
</script>