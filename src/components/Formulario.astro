---
// CheckoutForm.astro
import { z } from 'astro:content';

// Definir el esquema de validación
const formSchema = z.object({
  nombre: z.string().min(2, "El nombre debe tener al menos 2 caracteres"),
  apellidos: z.string().min(2, "Los apellidos deben tener al menos 2 caracteres"),
  celular: z.string().regex(/^\d{10}$/, "El número de celular debe tener 10 dígitos"),
  correo: z.string().email("Correo electrónico inválido"),
  identificacion: z.string().min(5, "El número de identificación debe tener al menos 5 caracteres"),
  ciudad: z.string().min(2, "La ciudad debe tener al menos 2 caracteres"),
  direccion: z.string().min(5, "La dirección debe tener al menos 5 caracteres"),
  complemento: z.string().optional(),
});

// Tipos
type FormData = z.infer<typeof formSchema>;

interface CartItem {
  title: string;
  quantity: number;
  totalPrice: number;
}

// Variable para almacenar errores de validación
let formErrors: Partial<Record<keyof FormData, string>> = {};

// Manejar el envío del formulario
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const data = Object.fromEntries(formData);
    const validatedData = formSchema.parse(data);

    // Obtener los datos del carrito de las cookies
    const cartData = Astro.cookies.get('cartData')?.json() as CartItem[] || [];
    const cartTotal = Astro.cookies.get('cartTotal')?.number() || 0;

    // Aquí puedes procesar los datos del formulario y del carrito
    console.log('Datos del formulario:', validatedData);
    console.log('Datos del carrito:', cartData);
    console.log('Total del carrito:', cartTotal);

    // Guardar los datos en las cookies
    Astro.cookies.set('checkoutFormData', JSON.stringify(validatedData), {
      path: '/',
      maxAge: 60 * 30, // 30 minutos
    });

    // Redirigir a una página de confirmación
    return Astro.redirect('/confirmacion-pedido');
  } catch (error) {
    if (error instanceof z.ZodError) {
      formErrors = error.flatten().fieldErrors as Partial<Record<keyof FormData, string>>;
    } else {
      console.error('Error al procesar el formulario:', error);
    }
  }
}

// Obtener los datos del carrito de las cookies para mostrar en el formulario
const cartData = Astro.cookies.get('cartData')?.json() as CartItem[] || [];
const cartTotal = Astro.cookies.get('cartTotal')?.number() || 0;
---

<div class="checkout-container">
  <form id="checkoutForm" method="POST" class="checkout-form">
    <div class="form-header">
      <h2>Finalizar Compra</h2>
      <div class="progress-bar">
        <div class="progress-step active">Carrito</div>
        <div class="progress-step active">Datos</div>
        <div class="progress-step">Pago</div>
      </div>
    </div>
    <div class="form-columns">
      <div class="form-column">
        <div class="form-group">
          <label for="nombre">Nombre:</label>
          <input type="text" id="nombre" name="nombre" required>
          {formErrors.nombre && <p class="error">{formErrors.nombre}</p>}
        </div>
        <div class="form-group">
          <label for="apellidos">Apellidos:</label>
          <input type="text" id="apellidos" name="apellidos" required>
          {formErrors.apellidos && <p class="error">{formErrors.apellidos}</p>}
        </div>
        <div class="form-group">
          <label for="celular">Celular:</label>
          <input type="tel" id="celular" name="celular" required>
          {formErrors.celular && <p class="error">{formErrors.celular}</p>}
        </div>
        <div class="form-group">
          <label for="correo">Correo electrónico:</label>
          <input type="email" id="correo" name="correo" required>
          {formErrors.correo && <p class="error">{formErrors.correo}</p>}
        </div>
      </div>
      <div class="form-column">
        <div class="form-group">
          <label for="identificacion">Número de identificación:</label>
          <input type="text" id="identificacion" name="identificacion" required>
          {formErrors.identificacion && <p class="error">{formErrors.identificacion}</p>}
        </div>
        <div class="form-group">
          <label for="ciudad">Ciudad:</label>
          <input type="text" id="ciudad" name="ciudad" required>
          {formErrors.ciudad && <p class="error">{formErrors.ciudad}</p>}
        </div>
        <div class="form-group">
          <label for="direccion">Dirección:</label>
          <input type="text" id="direccion" name="direccion" required>
          {formErrors.direccion && <p class="error">{formErrors.direccion}</p>}
        </div>
        <div class="form-group">
          <label for="complemento">Complemento dirección:</label>
          <input type="text" id="complemento" name="complemento">
          {formErrors.complemento && <p class="error">{formErrors.complemento}</p>}
        </div>
      </div>
    </div>
    <div id="cartSummary" class="cart-summary">
      <!-- Resumen del carrito se llenará con JavaScript -->
    </div>
    <button type="submit" class="submit-btn">Proceder al Pago</button>
  </form>
</div>
  
  <style>
    .checkout-container {
      max-width: 1000px;
      margin: 2rem auto;
      padding: 2rem;
      background-color: var(--white-smoke);
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }
  
    .checkout-form {
      display: flex;
      flex-direction: column;
    }
  
    .form-header {
      text-align: center;
      margin-bottom: 2rem;
    }
  
    .form-header h2 {
      color: var(--deep-blue);
      font-size: 2rem;
      margin-bottom: 1rem;
    }
  
    .progress-bar {
      display: flex;
      justify-content: space-between;
      margin-bottom: 2rem;
    }
  
    .progress-step {
      flex: 1;
      text-align: center;
      padding: 0.5rem;
      background-color: var(--medium-blue);
      color: var(--white-smoke);
      position: relative;
    }
  
    .progress-step::after {
      content: '';
      position: absolute;
      right: -10px;
      top: 0;
      width: 0;
      height: 0;
      border-top: 15px solid transparent;
      border-bottom: 15px solid transparent;
      border-left: 10px solid var(--medium-blue);
    }
  
    .progress-step:last-child::after {
      display: none;
    }
  
    .progress-step.active {
      background-color: var(--lime-green);
    }
  
    .progress-step.active::after {
      border-left-color: var(--lime-green);
    }
  
    .form-columns {
      display: flex;
      gap: 2rem;
      margin-bottom: 2rem;
    }
  
    .form-column {
      flex: 1;
    }
  
    .form-group {
      margin-bottom: 1.5rem;
    }
  
    label {
      display: block;
      margin-bottom: 0.5rem;
      color: var(--deep-blue);
      font-weight: bold;
    }
  
    input {
      width: 100%;
      padding: 0.75rem;
      border: 2px solid var(--medium-blue);
      border-radius: 8px;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }
  
    input:focus {
      outline: none;
      border-color: var(--lime-green);
      box-shadow: 0 0 0 3px rgba(205, 220, 57, 0.3);
    }
  
    .cart-summary {
      background-color: var(--lilac);
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 2rem;
    }
  
    .cart-summary h3 {
      color: var(--deep-blue);
      margin-bottom: 1rem;
    }
  
    .cart-item {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--medium-blue);
    }
  
    .submit-btn {
      background-color: var(--lime-green);
      color: var(--dark-gray);
      border: none;
      padding: 1rem 2rem;
      border-radius: 8px;
      font-size: 1.2rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      align-self: center;
    }
  
    .submit-btn:hover {
      background-color: #b9c45f;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
  
    @media (max-width: 768px) {
      .form-columns {
        flex-direction: column;
      }
  
      .progress-bar {
        flex-direction: column;
      }
  
      .progress-step::after {
        display: none;
      }
    }
  </style>
  
  <script>
interface CartItem {
  title: string;
  quantity: number;
  totalPrice: number;
}

interface FormData {
  nombre: string;
  apellidos: string;
  celular: string;
  correo: string;
  identificacion: string;
  ciudad: string;
  direccion: string;
  complemento?: string;
}

function initializeCheckoutForm(): void {
  const cartSummary = document.getElementById('cartSummary');
  if (!cartSummary) return;

  // Obtener los datos del carrito de las cookies del cliente
  const cartData = JSON.parse(document.cookie.replace(/(?:(?:^|.*;\s*)cartData\s*\=\s*([^;]*).*$)|^.*$/, "$1") || '[]') as CartItem[];
  const cartTotal = parseFloat(document.cookie.replace(/(?:(?:^|.*;\s*)cartTotal\s*\=\s*([^;]*).*$)|^.*$/, "$1") || '0');

  let summaryHTML = '<h3>Resumen del Carrito</h3>';
  cartData.forEach((item: CartItem) => {
    summaryHTML += `
      <div class="cart-item">
        <p>${item.title} (x${item.quantity})</p>
        <p>$${item.totalPrice.toLocaleString()}</p>
      </div>
    `;
  });
  summaryHTML += `<div class="cart-item"><strong>Total:</strong> <strong>$${cartTotal.toLocaleString()}</strong></div>`;

  cartSummary.innerHTML = summaryHTML;

  const form = document.getElementById('checkoutForm') as HTMLFormElement | null;
  if (form) {
    form.addEventListener('submit', (e: Event) => {
      e.preventDefault();
      if (validateForm()) {
        form.submit(); // Envía el formulario al servidor
      }
    });
  }
}

function validateForm(): boolean {
  const form = document.getElementById('checkoutForm') as HTMLFormElement;
  const formData: FormData = {
    nombre: (form.elements.namedItem('nombre') as HTMLInputElement).value,
    apellidos: (form.elements.namedItem('apellidos') as HTMLInputElement).value,
    celular: (form.elements.namedItem('celular') as HTMLInputElement).value,
    correo: (form.elements.namedItem('correo') as HTMLInputElement).value,
    identificacion: (form.elements.namedItem('identificacion') as HTMLInputElement).value,
    ciudad: (form.elements.namedItem('ciudad') as HTMLInputElement).value,
    direccion: (form.elements.namedItem('direccion') as HTMLInputElement).value,
    complemento: (form.elements.namedItem('complemento') as HTMLInputElement).value,
  };

  const errors: Partial<Record<keyof FormData, string>> = {};

  if (formData.nombre.length < 2) {
    errors.nombre = "El nombre debe tener al menos 2 caracteres";
  }

  if (formData.apellidos.length < 2) {
    errors.apellidos = "Los apellidos deben tener al menos 2 caracteres";
  }

  if (!/^\d{10}$/.test(formData.celular)) {
    errors.celular = "El número de celular debe tener 10 dígitos";
  }

  if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.correo)) {
    errors.correo = "Correo electrónico inválido";
  }

  if (formData.identificacion.length < 5) {
    errors.identificacion = "El número de identificación debe tener al menos 5 caracteres";
  }

  if (formData.ciudad.length < 2) {
    errors.ciudad = "La ciudad debe tener al menos 2 caracteres";
  }

  if (formData.direccion.length < 5) {
    errors.direccion = "La dirección debe tener al menos 5 caracteres";
  }

  // Mostrar errores en el formulario
  Object.keys(errors).forEach((key) => {
    const errorElement = document.getElementById(`${key}-error`);
    if (errorElement) {
      errorElement.textContent = errors[key as keyof FormData] || '';
    }
  });

  return Object.keys(errors).length === 0;
}

document.addEventListener('DOMContentLoaded', initializeCheckoutForm);
</script>

